// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	events "github.com/mrpsousa/pkg/events"
	mock "github.com/stretchr/testify/mock"
)

// EventDispatcherInterface is an autogenerated mock type for the EventDispatcherInterface type
type EventDispatcherInterface struct {
	mock.Mock
}

// Clear provides a mock function with given fields:
func (_m *EventDispatcherInterface) Clear() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Dispatch provides a mock function with given fields: event
func (_m *EventDispatcherInterface) Dispatch(event events.EventInterface) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(events.EventInterface) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Has provides a mock function with given fields: eventName, handler
func (_m *EventDispatcherInterface) Has(eventName string, handler events.EventHandlerInterface) bool {
	ret := _m.Called(eventName, handler)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, events.EventHandlerInterface) bool); ok {
		r0 = rf(eventName, handler)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Register provides a mock function with given fields: eventName, handler
func (_m *EventDispatcherInterface) Register(eventName string, handler events.EventHandlerInterface) error {
	ret := _m.Called(eventName, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, events.EventHandlerInterface) error); ok {
		r0 = rf(eventName, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: eventName, handler
func (_m *EventDispatcherInterface) Remove(eventName string, handler events.EventHandlerInterface) error {
	ret := _m.Called(eventName, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, events.EventHandlerInterface) error); ok {
		r0 = rf(eventName, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
